// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AccountDto account dto
// swagger:model AccountDto
type AccountDto struct {

	// links
	Links LinksDTO `json:"_links,omitempty"`

	// account number
	// Required: true
	AccountNumber *AccountNumberDto `json:"accountNumber"`

	// available balance
	// Required: true
	AvailableBalance *MoneyDto `json:"availableBalance"`

	// balance
	// Required: true
	Balance *MoneyDto `json:"balance"`

	// A description of the account
	Description string `json:"description,omitempty"`

	// The number of withdrawals remaining during the current calendar year before a fee is charged. Warning: This value is only updated once a day. If this element is not present the account has no limit for the number of free withdrawals
	FreeWithdrawalsLeft int32 `json:"freeWithdrawalsLeft,omitempty"`

	// The id of the account. Used for further requests towards the account API
	// Required: true
	ID *string `json:"id"`

	// The interest rate for the account
	InterestRate float64 `json:"interestRate,omitempty"`

	// The default name set by the system
	Name string `json:"name,omitempty"`

	// owner
	// Required: true
	Owner *CustomerDto `json:"owner"`

	// The product code for the account
	// Required: true
	Product *string `json:"product"`

	// The account type
	// Required: true
	Type *string `json:"type"`
}

// Validate validates this account dto
func (m *AccountDto) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccountNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAvailableBalance(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBalance(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOwner(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProduct(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AccountDto) validateAccountNumber(formats strfmt.Registry) error {

	if err := validate.Required("accountNumber", "body", m.AccountNumber); err != nil {
		return err
	}

	if m.AccountNumber != nil {
		if err := m.AccountNumber.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("accountNumber")
			}
			return err
		}
	}

	return nil
}

func (m *AccountDto) validateAvailableBalance(formats strfmt.Registry) error {

	if err := validate.Required("availableBalance", "body", m.AvailableBalance); err != nil {
		return err
	}

	if m.AvailableBalance != nil {
		if err := m.AvailableBalance.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("availableBalance")
			}
			return err
		}
	}

	return nil
}

func (m *AccountDto) validateBalance(formats strfmt.Registry) error {

	if err := validate.Required("balance", "body", m.Balance); err != nil {
		return err
	}

	if m.Balance != nil {
		if err := m.Balance.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("balance")
			}
			return err
		}
	}

	return nil
}

func (m *AccountDto) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *AccountDto) validateOwner(formats strfmt.Registry) error {

	if err := validate.Required("owner", "body", m.Owner); err != nil {
		return err
	}

	if m.Owner != nil {
		if err := m.Owner.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("owner")
			}
			return err
		}
	}

	return nil
}

func (m *AccountDto) validateProduct(formats strfmt.Registry) error {

	if err := validate.Required("product", "body", m.Product); err != nil {
		return err
	}

	return nil
}

func (m *AccountDto) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AccountDto) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AccountDto) UnmarshalBinary(b []byte) error {
	var res AccountDto
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
