// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// MoneyDto money dto
// swagger:model MoneyDto
type MoneyDto struct {

	// The amount in the monetary unit represented by the currency code. The format is the monetary unit followed by . and two digits of cent.The value of cent in this context is one hundredth of the monetary unit.12.67 in NOK would equal 12 kroners and 67 ore
	// Required: true
	Amount *float64 `json:"amount"`

	// The three letter currency code
	// Required: true
	CurrencyCode *string `json:"currencyCode"`
}

// Validate validates this money dto
func (m *MoneyDto) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCurrencyCode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MoneyDto) validateAmount(formats strfmt.Registry) error {

	if err := validate.Required("amount", "body", m.Amount); err != nil {
		return err
	}

	return nil
}

func (m *MoneyDto) validateCurrencyCode(formats strfmt.Registry) error {

	if err := validate.Required("currencyCode", "body", m.CurrencyCode); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MoneyDto) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MoneyDto) UnmarshalBinary(b []byte) error {
	var res MoneyDto
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
