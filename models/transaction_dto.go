// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TransactionDto transaction dto
// swagger:model TransactionDto
type TransactionDto struct {

	// links
	Links LinksDTO `json:"_links,omitempty"`

	// The date the transaction was booked (Norwegian: bokfÃžringsdato)
	// Format: date
	AccountingDate strfmt.Date `json:"accountingDate,omitempty"`

	// amount
	// Required: true
	Amount *MoneyDto `json:"amount"`

	// Archive reference
	ArchiveReference string `json:"archiveReference,omitempty"`

	// Transaction description.
	Description string `json:"description,omitempty"`

	// The original unparsed transaction text
	FullDescription string `json:"fullDescription,omitempty"`

	// Remote account number
	RemoteAccount string `json:"remoteAccount,omitempty"`

	// Code identifying the type of transaction (E.g. cash withdrawal, purchase, etc).
	TransactionCode string `json:"transactionCode,omitempty"`

	// A human-readable version of the transaction code
	TransactionType string `json:"transactionType,omitempty"`
}

// Validate validates this transaction dto
func (m *TransactionDto) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccountingDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAmount(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TransactionDto) validateAccountingDate(formats strfmt.Registry) error {

	if swag.IsZero(m.AccountingDate) { // not required
		return nil
	}

	if err := validate.FormatOf("accountingDate", "body", "date", m.AccountingDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TransactionDto) validateAmount(formats strfmt.Registry) error {

	if err := validate.Required("amount", "body", m.Amount); err != nil {
		return err
	}

	if m.Amount != nil {
		if err := m.Amount.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("amount")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TransactionDto) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TransactionDto) UnmarshalBinary(b []byte) error {
	var res TransactionDto
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
